name: CI/CD for Vehicle Compliance System

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Prepare Environment
        run: |
          rm -rf node_modules
          npm cache clean --force

      # Install dependencies
      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Update esbuild
        run: npm install esbuild@latest

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 872515257507.dkr.ecr.us-east-2.amazonaws.com

      # Build Docker Image
      - name: Build Docker Image
        run: docker build -t vehicle-compliance-system .

      # Tag and Push Docker Image
      - name: Push Docker Image
        run: |
          docker tag vehicle-compliance-system:latest 872515257507.dkr.ecr.us-east-2.amazonaws.com/vehicle-compliance-system:latest
          docker push 872515257507.dkr.ecr.us-east-2.amazonaws.com/vehicle-compliance-system:latest

      # Deploy to Elastic Beanstalk
      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        run: |
          npx eb deploy --staged  